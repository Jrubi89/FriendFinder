class TaxExports < BaseController
  include Crudle::Controller

  before do
    if path_params[:id]
      @export = model.find_by(id: path_params[:id])
      @export || halt(404, 'No Export found by given ID')
    end
  end

  def export id, params
    unless Cfg.taxable_states.any?
      halt(400, 'There are no taxable states set in admin')
    end

    date_a = Time.new(*params[:date_a].split('-').map(&:to_i), 0, 0, 0, Cfg.utc_offset).utc
    date_z = Time.new(*params[:date_z].split('-').map(&:to_i), 23, 59, 59, Cfg.utc_offset).utc

    orders = Order.ok.where('created_at BETWEEN ? AND ?', date_a, date_z).where(shipping_state: Cfg.taxable_states)
    taxjar = orders.each_with_object([TaxExport::TAXJAR_FIELDS_MAP.keys]) {|o,l|
      l.push(TaxExport::TAXJAR_FIELDS_MAP.values.map {|v| v.is_a?(Proc) ? v.call(o) : v})
    }

    @export.update_attributes({
      name: params[:name],
      date_a: date_a,
      date_z: date_z,
      taxjar: taxjar,
      exported_at: Time.now.utc
    })

    orders.update_all(tax_export_id: @export.id)
    [@export.serialized]
  end

  def download id

    filename = [
      Cfg.hostname,
      'TaxExport',
      @export.date_a.strftime('%m-%d-%Y'),
      @export.date_z.strftime('%m-%d-%Y'),
    ].reject(&:nil?).reject(&:empty?).join(' ')

    halt([
      200,
      {
        'Content-Type' => 'text/csv',
        'Content-Disposition' => 'attachment; filename=%s.csv' % filename
      },
      @export.taxjar.map {|l|
        l.map {|v| '"%s"' % v}.join(',') << "\n"
      }
    ])
  end

  private
  def model; TaxExport end

  def order; {date_a: :desc} end

  # def name_filter params, dataset
  #   return if params[:name].nil? || params[:name].empty?
  #   dataset.where('name LIKE ?', params[:name] + '%')
  # end

  # def list_serializer item
  #   serializer(item)
  # end

  # def editor_serializer item
  #   serializer(item)
  # end

  # def serializer item
  #   item
  # end

end
