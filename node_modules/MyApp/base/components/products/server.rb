class Products < BaseController
  include Crudle::Controller

  before do
    if path_params[:product_id]
      @product = model.find_by(id: path_params[:product_id])
      @product || halt(400, 'No Product found by given ID')

      if path_params[:sku_id]
        @sku = @product.skus.find_by(id: path_params[:sku_id])
        @sku || halt(400, 'No SKU found by given ID')
      end
    end
  end

  def configs params
    {
      sizes: Cfg.products[:sizes],
      colors: Cfg.products[:colors],
      tags: Cfg.products[:tags],
      products: Product.all,
      categories: ProductCategory.all,
      prices: Cfg.products[:price_levels],
      orders_url: Orders.url
    }
  end

  private
  def model; Product end

  def name_filter params, dataset
    return if params[:name].nil? || params[:name].empty?
    dataset.where('name ILIKE ?', "%#{params[:name]}%")
  end

  def sku_filter params, dataset
    return if params[:sku].nil? || params[:sku].empty?
    dataset.where(id: ProductSKU.where('uuid ILIKE ?', "%#{params[:sku]}%").pluck(:product_id))
  end

  def low_stock_filter params, dataset
    return if params[:low_stock].nil? || params[:low_stock].empty?
    dataset.low_stock
  end

  # def order; end

  # def name_filter params, dataset
  #   return if params[:name].nil? || params[:name].empty?
  #   dataset.where('name LIKE ?', params[:name] + '%')
  # end

  def list_serializer item
    @items_in_stock ||= Product.items_in_stock
    serializer(item).update(items_in_stock: @items_in_stock[item.id] || 'unknown')
  end

  def editor_serializer item
    serializer(item).update(skus: serialized_skus(item))
  end

  def serializer item
    item.serialized
  end

  def serialized_skus item
    item.skus.map {|s| serialized_sku(s)}
  end

  def serialized_sku sku
    sku.serialized.update({
      items_sold: sku.sold,
      orders: sku_orders(sku)
    })
  end

  def sku_orders sku
    sku.orders.order(created_at: :desc).select(:order_id, :inventory_items, :created_at).each_with_object({}) {|s,o|
      (o[s.created_at ? s.created_at.strftime(SKU_ORDER_TIMESTAMP_FORMAT) : 'Unknown'] ||= []).push(s)
    }
  end
end
