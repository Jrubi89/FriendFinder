import {find, findIndex, omit} from 'lodash'

const default_inventory_view = 'Skus'

export default {

  state: {
    inventory_view: default_inventory_view,
    inventory_sku: null
  },

  mutations: {

    PRODUCTS__ADD_CONTAINED_PRODUCT({item}, product) {
      item.contains = item.contains || []
      item.contains.unshift(product)
    },

    PRODUCTS__DELETE_CONTAINED_PRODUCT({item}, row) {
      let index = findIndex(item.contains || [], (p) => p.product_id === row.product_id)
      if (index >= 0)
        item.contains.splice(index, 1)
    },

    PRODUCTS__ADD_PHOTO({item}, photo) {
      item.photos = item.photos || []
      item.photos.unshift(photo)
    },

    PRODUCTS__DELETE_PHOTO({item}, photo) {
      let index = findIndex(item.photos || [], (p) => p.original === photo.original)
      if (index >= 0)
        item.photos.splice(index, 1)
    },

    PRODUCTS__ADD_COLOR_PHOTO({item}, {color, photo}) {
      let photos = { ...item.color_photos || {} }
      photos[color] = photo
      item.color_photos = photos
    },

    PRODUCTS__DELETE_COLOR_PHOTO({item}, color) {
      item.color_photos = omit(item.color_photos || {}, color)
    },

    PRODUCTS__ADD_TAG_PHOTO({item}, {tag, photo}) {
      let photos = { ...item.tag_photos || {} }
      photos[tag] = photo
      item.tag_photos = photos
    },

    PRODUCTS__DELETE_TAG_PHOTO({item}, tag) {
      item.tag_photos = omit(item.tag_photos || {}, tag)
    },

    PRODUCTS__DELETE_SKU({item}, sku) {
      let index = findIndex(item.skus || [], (s) => s.id === sku.id)
      if (index >= 0)
        item.skus.splice(index, 1)
    },

    PRODUCTS__SKU_STOCK({Products}, sku) {
      Products.inventory_sku = sku
      Products.inventory_view = 'Stock'
    },

    PRODUCTS__SET_SKUS({item}, skus) {
      item.skus = skus
    },

    PRODUCTS__EDIT_SKU({Products}, sku) {
      Products.inventory_sku = sku
      Products.inventory_view = 'Edit'
    },

    PRODUCTS__RESET_INVENTORY_VIEW({Products}) {
      Products.inventory_sku = null
      Products.inventory_view = default_inventory_view
    },

    PRODUCTS__UPDATE_SKU_INVENTORY({item}, {sku_id, update_type, history}) {
      let sku = find(item.skus || [], (s) => s.id === sku_id)
      if (sku)
        sku[`${update_type}s`] = history
    },

  }
}
