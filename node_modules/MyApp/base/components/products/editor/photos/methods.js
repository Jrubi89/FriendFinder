import {trim, omit, merge} from 'lodash'
import Serialize from 'form-serialize'
import Alert from 'appril-alert'


export function initiate_upload(params) {
  this.upload_params = params || {}
  this.$el.querySelector('[type="file"]').click()
}


export function upload(evt) {

  let reader = new FileReader()

  reader.onload = (event) => {
    this.upload_params.base64 = trim(event.target.result.split(',')[1])
    this.api.upload_photo(this.item.id, this.upload_params).send({
      success: (photo) => {
        if (this.upload_params.color) {
          this.$store.commit('PRODUCTS__ADD_COLOR_PHOTO', {color: this.upload_params.color, photo})
        } else if (this.upload_params.tag) {
          this.$store.commit('PRODUCTS__ADD_TAG_PHOTO', {tag: this.upload_params.tag, photo})
        } else {
          this.$store.commit('PRODUCTS__ADD_PHOTO', photo)
        }
      }
    })
  }

  reader.readAsDataURL(evt.target.files[0])
}


export function update_label(photo, evt) {
  let params = {original: photo.original, label: evt.target.value}
  this.api.update_photo_label(this.url.params.id, params).send({
    success() {Alert.success()}
  })
}


export function delete_photo(photo, params = {}) {
  Alert.confirm(() => {
    this.api.delete_photo(this.url.params.id, merge({}, params, {original: photo.original})).send({
      success: () => {
        if (params.color)
          this.$store.commit('PRODUCTS__DELETE_COLOR_PHOTO', params.color)
        else if (params.tag)
          this.$store.commit('PRODUCTS__DELETE_TAG_PHOTO', params.tag)
        else
          this.$store.commit('PRODUCTS__DELETE_PHOTO', photo)
      }
    })
  })
}
