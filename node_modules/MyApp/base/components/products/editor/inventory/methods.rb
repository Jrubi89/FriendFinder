class Products
  SKU_ORDER_TIMESTAMP_FORMAT = '%b %-d %Y'.freeze

  def create_sku product_id, ignored_sku_id, params
    if params[:default] == 'true'
      @product.skus.update_all(default: false)
    end
    stock = params.delete('stock')
    sku = @product.skus.create(params)
    sku.register_addition(stock, 'initial stock')
    [
      serialized_skus(@product)
    ]
  end

  def update_sku product_id, sku_id, params
    if params[:default] == 'true'
      @product.skus.where("id <> ?", @sku.id).update_all(default: false)
    else
      params[:default] = @sku.default ? true : false
    end
    params[:taxable] ||= false
    params[:shippable] ||= false
    params[:creditable] ||= false
    @sku.update_attributes(params)
    [
      serialized_skus(@product)
    ]
  end

  def delete_sku product_id, sku_id
    @sku.destroy
    true
  end

  def update_inventory product_id, sku_id, update_type, items, notice
    @sku.send("register_#{update_type}", items, notice)
    [
      @sku[update_type + 's']
    ]
  end

end
