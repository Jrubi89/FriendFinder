import Serialize from 'form-serialize'
import Alert from 'appril-alert'
import {scroll_top} from 'appril-utils'

export function sku_stock(sku) {
  this.$store.commit('PRODUCTS__SKU_STOCK', sku)
}

export function edit_sku(sku) {
  this.$store.commit('PRODUCTS__EDIT_SKU', sku)
}

export function close() {
  this.$store.commit('PRODUCTS__RESET_INVENTORY_VIEW')
  scroll_top()
}

export function trigger_create_sku() {
  this.$store.commit('PRODUCTS__EDIT_SKU', {})
}


export function save_sku(sku, evt) {
  let form = evt.target.closest('form')

  if (!$(form).parsley().validate())
    return

  let data = Serialize(form, {hash: true, empty: true})

  let method = sku.id ? 'update_sku' : 'create_sku'

  this.api[method](this.url.params.id, sku.id, data).send({
    success: (skus) => {
      this.$store.commit('PRODUCTS__SET_SKUS', skus)
      this.close()
    }
  })
}


export function delete_sku(sku) {
  Alert.confirm(() => {
    this.api.delete_sku(this.url.params.id, sku.id).send({
      success: () => this.$store.commit('PRODUCTS__DELETE_SKU', sku)
    })
  })
}

export function update_inventory(update_type, sku_id, evt) {

  let form = evt.target.closest('form')
  let data = Serialize(form, {hash: true})

  if (parseInt(data.items) === 0)
    return Alert.error('Please insert items')

  if (!data.notice)
    return Alert.error('Please insert notice')

  this.api.update_inventory(this.url.params.id, sku_id, update_type, data.items, data.notice).send({
    success: (history) => {
      this.$store.commit('PRODUCTS__UPDATE_SKU_INVENTORY', {sku_id, update_type, history})
      form.reset()
    }
  })
}
