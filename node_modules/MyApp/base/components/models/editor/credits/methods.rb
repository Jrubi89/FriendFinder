class Models
  CREDITS_AUTH_TOKEN = '957b40aa41032c0537ba7b9adc140409'.freeze

  before :add_credits, :delete_credits do
    path_params[:token] == CREDITS_AUTH_TOKEN || halt(400, 'Authentication Failed')
  end

  def add_credits token, user_id, params

    if params[:allocated_for].to_s =~ /\A\d+\Z/
      credit = Credit.allocate_referral_credits(@user.id, params[:allocated_for])
      credit || halt(400, 'Error adding credits. Most likely no user found by given ID')
    else
      credit = @user.credits.new({
        credits: params[:credits],
        allocated_credits: params[:credits],
        store: params[:store],
        allocated_for: params[:allocated_for]
      })
    end

    if params[:expires_at]
      credit.expires_at = Credit.expires_at_timestamp(params[:expires_at].to_i)
    end

    credit.save!

    credits_for(@user)
  end

  def delete_credits token, user_id, credit_id
    @user.credits.where(id: credit_id).delete_all
    credits_for(@user)
  end

  private
  def credits_for user
    {
      earned: user.credits.map(&:serialized).map {|c|
        c[:expires_at] = nil if c[:expires_at] == Float::INFINITY
        c[:expired] = c[:expires_at].is_a?(Time) && c[:expires_at] < Time.now.utc
        if c[:referred_user_id] && referred_user = User.select(:first_name, :last_name).find_by(id: c[:referred_user_id])
          c[:allocated_for] = "Referring #{referred_user.first_name} #{referred_user.last_name}"
        end
        c[:consumed] = (c[:consumption] || []).map {|cc| cc['credits']}.reduce(:+)
        c
      },
      spent: user.spent_credits,
      balance: user.available_credits
    }
  end
end
