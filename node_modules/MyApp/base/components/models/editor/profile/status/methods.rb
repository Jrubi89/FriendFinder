class Models

  def update_member_status user_id, status

    status = if member_type = User::MEMBER_TYPES.find {|t| t == status}
      @user.member_type = member_type
      User::APPROVED
    else
      User::STATUSES.find {|s| s == status}
    end

    status || halt(400, 'Unknown status')

    @user.status = status
    @user.status_updated_at = Time.now.utc

    if status == User::APPROVED
      # set new password reset token for user to be able to create a password
      @user.password_reset_token = Helpers.generate_random_token

      # allocate welcome credits for just approved member
      Credit.allocate_signup_credits(@user.id)
    end

    if email = Email["model_status_changed_to_#{status}"]
      email.schedule(@user.email, user_id: @user.id, render_context: {
        user: @user.serialized.update(password_reset_token: @user.password_reset_token)
      })
    end

    @user.save

    {
      status: @user.status,
      member_type: @user.member_type,
      password_created_at: @user.password_created_at
    }
  end
end
