import {map, isString} from 'lodash'
import Moment from 'moment'
import Alert from 'appril-alert'
import {date_format} from 'appril-datetime'
import {scroll_top} from 'appril-utils'

const photo_taken_date = function(taken_at) {
  if (!taken_at)
    return

  if (!isString(taken_at))
    return

  let date = (taken_at.match(/^\d\d\d\d\W+\d+\W+\d+/) || [])[0]

  if (!date)
    return

  date = Moment(date.replace(/\W+/g, '-'))

  if (!date.isValid())
    return

  return date_format(date)
}


export default {
  props: ['item'],

  template: require('./template'),

  mounted() {
    $('.gallery-item', this.$el).magnificPopup({
      type: 'image',
      gallery: {enabled: true}
    })
  },

  computed: {

    photos() {
      return map(this.item.application_photos || [], function(photo) {
        photo.taken_date = photo.taken_date || photo_taken_date(photo.taken_at)
        return photo
      })
    },
  },

  methods: {

    remove(photo_id) {
      Alert.confirm(() => {
        this.api.delete_application_photo(this.item.id, photo_id).send({
          success: () => this.$store.commit('USERS__DELETE_PHOTO', parseInt(photo_id))
        })
      })
    },


    set_featured(photo_id) {
      this.api.set_feature_photo(this.item.id, photo_id).send({
        success: (feature_photo_url) => {
          this.$store.commit('CRUDLE__UPDATE_ITEM', {feature_photo: feature_photo_url})
          scroll_top()
        }
      })
    },


    rotate(photo_id, direction) {
      this.api.rotate_application_photo(this.item.id, photo_id, direction).send({
        success: () => this.$store.commit('USERS__REFRESH_PHOTO_SRC', parseInt(photo_id))
      })
    }

  }
}
