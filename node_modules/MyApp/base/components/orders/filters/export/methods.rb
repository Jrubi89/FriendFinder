class Orders

  EXPORT_MAP = {
    'Order Date' => -> (o,p) {date_format(o.created_at)},
    'Order Number' => -> (o,p) {o.id},
    'First Name' => -> (o,p) {o.shipping_first_name},
    'Last Name' => -> (o,p) {o.shipping_last_name},
    'Email Address' => -> (o,p) {o.shipping_email},
    'Shipping Address' => -> (o,p) {'%s %s' % [o.shipping_address, o.shipping_address2]},
    'City' => -> (o,p) {o.shipping_city},
    'State' => -> (o,p) {o.shipping_state},
    'Zip' => -> (o,p) {o.shipping_zipcode},
    'Country' => -> (o,p) {o.shipping_country},
    'SKU' => -> (o,p) {p.sku ? p.sku.uuid : nil},
    'Quantity' => -> (o,p) {p.qty},
    'Price' => -> (o,p) {p.price_formated},
    'Shipping' => -> (o,p) {o.shipping_formated},
    'Sales Tax' => -> (o,p) {o.taxes_formated},
    'Order Total' => -> (o,p) {o.total_formated},
    'Credits Used' => -> (o,p) {o.credits_used || 0},
    'Amount Charged' => -> (o,p) {o.money_used_formated},
    'Credits Remaining Balance' => -> (o,p) {o.credits_remaining},
    'Carrier' => -> (o,p) {o.carrier},
    'Tracking #' => -> (o,p) {'#' << o.tracking_number.to_s},
    'Ship Date' => -> (o,p) {date_format(o.shipped_at)},
  }.freeze

  def export
    filename = [
      Cfg.hostname,
      'orders',
      params[:date_a],
      params[:date_z],
      Order::STATUS_LABELS[params[:status]] || params[:status]
    ].reject(&:nil?).reject(&:empty?).join(' ')

    halt([
      200,
      {
        'Content-Type' => 'text/csv',
        'Content-Disposition' => 'attachment; filename=%s.csv' % filename
      },
      CSV.generate do |csv|
        csv << EXPORT_MAP.keys
        filtered_dataset(params).ok.each do |o|
          o.products.each do |p|
            next if p.contains
            csv << EXPORT_MAP.values.map {|v| v.call(o,p)}
          end
        end
      end
    ])
  end
end
