class Orders < BaseController
  include Crudle::Controller

  def configs params
    {
      order_statuses: Order::STATUS_LABELS,
      product_categories: ProductCategory.all,
      products: Product.active.map {|p| p.serialized.update(skus: p.skus)},
      product_sizes: Cfg.products[:sizes],
      product_colors: Cfg.products[:colors],
      shipping_statuses: {
        shipped: "Shipped",
        awaiting_shipment: "Awaiting Shipment",
        pickup: "Pickup",
      }
    }
  end

  def create
    model.create(draft: true).id
  end

  def user user_id
    user = User.find_by(id: user_id)
    user || halt(400, 'No user found by given ID')
    [
      user.fully_serialized
    ]
  end

  def users q
    f,l = q.strip.split(/\s+/, 2)
    [
      if f && l
        User.
          where(FIRST_NAME_QUERY, ILIKE_FORMAT % f).
          where(LAST_NAME_QUERY, ILIKE_FORMAT % l)
      else
        User.
          where(FIRST_NAME_QUERY, ILIKE_FORMAT % f)
      end.approved.map(&:fully_serialized)
    ]
  end

  def selected selected
    [
      model.where(id: selected).map {|o| editor_serializer(o)}
    ]
  end

  def self.date_format date
    return unless date
    date.strftime('%m/%d/%Y')
  end


  private
  def model; Order end

  # def order; end

  # def name_filter params, dataset
  #   return if params[:name].nil? || params[:name].empty?
  #   dataset.where('name LIKE ?', params[:name] + '%')
  # end

  def list_serializer order
    order.serialized
  end

  def editor_serializer order
    order.serialized_with_products
  end

  # def serializer item
  #   item
  # end

end
