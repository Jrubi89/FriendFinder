import {find, map, reduce, sortBy, isEqual} from 'lodash'
import {scroll_top} from 'appril-utils'
import Alert from 'appril-alert'
import {product_default_sku} from 'components/orders/helpers'

export function close_product() {
  this.$store.commit('ORDERS__SET_PRODUCT', null)
  scroll_top()
}

export function detect_sku(p) {
  let color = (this.$store.state.Orders.color_map || {})[p.id] || this.default_sku.color
  let size = (this.$store.state.Orders.size_map || {})[p.id] || this.default_sku.size

  return find(p.skus, (s) => {
    if (color && size) {
      return s.color === color && s.size == size
    } else if (color) {
      return s.color === color
    } else if (size)
      return s.size === size
    else
      return false
  })
}

function unavailable_product_error(item) {
  Alert.warning(`Sorry, looks like ${item} is unavailable at the moment`)
}

function out_of_stock_error(item) {
  Alert.warning(`Sorry, looks like ${item} is out of stock`)
}

export function sku_already_in_cart(sku) {
  return find(this.cart, (row) => {
    return row.sku &&
      row.product.id === this.product.id &&
      row.sku.id === sku.id
  })
}

export function skus_already_in_cart(skus) {
  return find(this.cart, (row) => {
    return row.skus &&
      row.product.id === this.product.id &&
      isEqual(sortBy(map(row.skus, 'id')), sortBy(map(skus, 'id')))
  })
}

export function add_to_cart() {
  let sku, skus, price

  if (this.product.contains && this.product.contains.length > 0) {

    skus = reduce(this.contained_products, (skus,p) => {
      return skus.concat([ this.detect_sku(p) || product_default_sku(p) ])
    }, [])

    for (let s in skus) {
      if (!s)
        return unavailable_product_error(this.product.name)

      if (parseInt(s.items_in_stock) <= 0)
        return out_of_stock_error(s.name)
    }

    if (this.skus_already_in_cart(skus))
      return

    let default_sku = product_default_sku(this.product)

    if (!default_sku)
      return unavailable_product_error(this.product.name)

    price = default_sku.price

  } else {
    sku = this.detect_sku(this.product) || this.default_sku

    if (!sku)
      return unavailable_product_error(this.product.name)

    if (parseInt(sku.items_in_stock) <= 0)
      return out_of_stock_error(sku.name)

    if (this.sku_already_in_cart(sku))
      return

    price = sku.price
  }

  this.$store.commit('ORDERS__CART__ADD', {
    product: this.product,
    qty: 1,
    price,
    sku,
    skus
  })
}
