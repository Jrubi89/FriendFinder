class Agents

  def update_member_status user_id, status

    status = User::STATUSES.find {|s| s == status}
    status || halt(400, 'Unknown status')

    if @user.status == status
      halt(400, "User is already #{status}")
    end

    @user.status = status
    @user.status_updated_at = Time.now.utc

    if email = Email["agent_status_changed_to_#{status}"]
      email.schedule(@user.email, user_id: @user.id, render_context: {user: @user.serialized})
    end

    @user.save

    {status: @user.status}
  end
end
