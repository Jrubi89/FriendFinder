class ModelDirectory < BaseController
  include Crudle::Controller

  REQUESTED_AT = 'requested_at'.freeze
  REQUESTED_UPDATES = 'requested_updates'.freeze

  def configs params
    {
      specs: Cache.specs
    }
  end

  before do
    if path_params[:id]
      @profile = ModelDirectoryProfile.find_by(id: path_params[:id])
      @profile || halt(404, 'Profile not found')
    end
  end

  def approve id
    ModelDirectoryProfile.where(user_id: @profile.user_id).where('id <> ?', @profile.id).map(&:destroy)
    @profile.update_attributes(draft: false)
    email(@profile, :model_directory_profile_approved)
    editor_serializer(@profile)
  end

  def disapprove id, requested_updates
    ModelDirectoryProfile.where(user_id: @profile.user_id).where('id <> ?', @profile.id).map(&:destroy)
    @profile.update_column(:draft, true)
    _request_updates(@profile, requested_updates)
    editor_serializer(@profile)
  end

  def request_updates id, requested_updates
    _request_updates(@profile, requested_updates)
    editor_serializer(@profile)
  end

  def delete_photo id, photo_id
    photo = @profile.photos.find_by(id: photo_id)
    photo.destroy
    true
  end

  private

  def _request_updates profile, requested_updates

    @profile.update_requests ||= []
    @profile.update_requests.push({
      REQUESTED_AT => Time.now.utc,           # it is CRITICAL
      REQUESTED_UPDATES => requested_updates  # to use string keys
    })

    @profile.update_requested_at = Time.now.utc
    @profile.review_requested_at = nil

    @profile.save

    email(@profile, :model_directory_profile_updates_required)
  end

  def status_filter params, dataset
    return if params[:status].nil? || params[:status].empty?
    dataset.send(params[:status])
  end

  def first_name_filter params, dataset
    return if params[:first_name].nil? || params[:first_name].empty?
    dataset.where('first_name ILIKE ?', '%s%' % params[:first_name])
  end

  def last_name_filter params, dataset
    return if params[:last_name].nil? || params[:last_name].empty?
    dataset.where('last_name ILIKE ?', '%s%' % params[:last_name])
  end

  def email profile, email_uuid
    return unless profile.user
    return unless email = Email[email_uuid]
    return unless profile.user.subscribed_to(email.type)
    url = File.join(Cfg.default_scheme, Cfg.hostname, 'model_directory', profile.user.username)
    email.schedule(profile.user.email, user_id: profile.user.id, render_context: {
      user: profile.user.serialized,
      profile: profile.serialized.update(url: url),
      requested_update: (profile.update_requests || [{}]).last['requested_updates']
    })
  end

  def model
    ModelDirectoryProfile.where('review_requested_at IS NOT NULL OR update_requested_at IS NOT NULL')
  end

  def order; 'draft DESC, review_requested_at ASC, id DESC' end

  # def name_filter params, dataset
  #   return if params[:name].nil? || params[:name].empty?
  #   dataset.where('name LIKE ?', params[:name] + '%')
  # end

  def list_serializer item
    item.serializable_hash.update(approved: item.approved)
  end

  def editor_serializer item
    item.serialized
  end

  # def serializer item
  #   item
  # end

end
