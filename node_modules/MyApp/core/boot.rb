# do NOT edit this file, edit base/boot.rb instead

require 'yaml'
require 'appril'

module Appril
  extend self

  def load_config *dirs, env: RocketIO.environment

    config = RocketIO.indifferent_params({environment: env.to_s.freeze})

    dirs.each do |dir|
      config.update(load_config_file("#{dir}/config.yml"))
      config.update(load_config_file("#{dir}/env/#{env}.yml"))

      loaded = [
        File.expand_path("config.yml", dir),
        File.expand_path("env/#{env}.yml", dir)
      ]

      %w[
        *.yml
        **/*.yml
      ].each do |pattern|
        Dir[File.join(dir, pattern)].each do |file|

          path = File.expand_path(file, dir)
          next if loaded.include?(path)
          loaded << path

          key = File.basename(file, '.yml')
          key_config = load_config_file(file)
          key_config_keys = key_config.keys.map(&:to_s)

          config[key] = if key_config_keys.include?(config[:environment])
            # current environment found, use it
            key_config[config[:environment]]
          else
            if RocketIO::ENVIRONMENTS.keys.find {|k| key_config_keys.include?(k)}
              # there are some environment(s), but no current one so set current environment to nil
              nil
            else
              # there are no environments, so this config is available on any environment
              key_config
            end
          end
        end
      end
    end

    def config.method_missing key
      self[key]
    end

    config
  end

  def load_config_file file
    RocketIO.indifferent_params(YAML.load(File.read(file)) || {})
  end
end

Dir.chdir File.expand_path('../..', __FILE__) do
  require './base/boot'

  require 'bundler/setup'
  Bundler.require(:default)
  Bundler.require(RocketIO.environment)

  require './config/config'
end
