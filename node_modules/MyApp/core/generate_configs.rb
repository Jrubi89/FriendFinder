#!/usr/bin/env ruby

# do NOT edit this file

require File.expand_path('../load', __FILE__)

module Appril
  extend self

  def generate_configs dir
    generate_components_file(dir)
    generate_webpack_file(dir)
    generate_store_modules_file(dir)
  end

  def generate_components_file dir
    components = JSON.pretty_generate(controllers_map(dir))
    File.open(File.expand_path('components.json', dir), 'w') {|f| f << components}
  end

  def generate_webpack_file dir
    config = load_config("#{dir}/config", env: :development)
    webpack_entries = webpack_entries(dir, controllers_map(dir))
    File.open File.expand_path('webpack/config.json', dir), 'w' do |f|
      f << JSON.pretty_generate({
        path: config[:client_path],
        url: config[:client_url],
        server_url: config[:server_url],
        entries: webpack_entries
      })
    end
  end

  def generate_store_modules_file dir
    lines = controllers_map(dir).each_with_object([
      '// this file is auto-generated, do not edit',
      'const modules = {}'
    ]) do |c,o|
      next unless c[:name] # skip anonymous controllers
      pattern = "base/components/#{c[:path]}/store.*"
      next unless file = Dir[File.expand_path(pattern, dir)].find {|e| File.file?(e)}
      path = file.sub(dir, 'app')
      o << "
        import #{c[:name]} from '#{path}'
        modules.#{c[:name]} = #{c[:name]}
      "
    end
    lines.push('export default modules')
    File.open(File.expand_path('base/store/modules.js', dir), 'w') {|f| f << lines.join("\n")}
  end

  def controllers_map dir
    path_prefix = File.expand_path('base/components', dir)
    RocketIO.controllers.each_with_object([]) do |controller,o|
      next if controller.to_s =~ /BaseController|RTCPController/
      o << {
        path: controller.dirname.sub(path_prefix, '').gsub(/\A\/|\/\Z/, ''),
        url: controller.url,
        url_pattern: url_pattern(controller),
        name: controller.name.gsub('::', '__'),
        api: controller.api.keys
      }
    end.sort do |a,b|
      b[:url].split('/').size <=> a[:url].split('/').size
    end
  end

  def webpack_entries dir, controllers
    entries = controllers.each_with_object({}) do |controller,o|
      pattern = "base/components/#{controller[:path]}/index.*"
      next unless entry = Dir[File.expand_path(pattern, dir)].find {|e| File.file?(e)}
      o[controller[:path]] = entry.sub(dir, '.')
    end

    pattern = "base/core.*"
    if core = Dir[File.expand_path(pattern, dir)].find {|e| File.file?(e)}
      entries[:core] = core.sub(dir, '.')
    end

    entries
  end

  def url_pattern controller
    controller.url *controller.instance_method(:index).parameters.each_with_object([]) {|param,o|
      pattern = if param[0] == :rest
        "*"
      elsif param[0] == :req
        ":#{param[1]}"
      elsif param[0] == :opt
        ":#{param[1]}?"
      end
      o << pattern if pattern
    }
  end
end

Appril.generate_configs(File.expand_path('../..', __FILE__))
